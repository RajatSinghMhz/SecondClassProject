# Concatenation of array

import numpy as np

x = np.array([1, 2, 3])
y = np.array([3, 4, 5])
z = np.array([5, 6, 7])
concatinatedArray = np.concatenate([y, x, z])
print(concatinatedArray)
print("-------------------------------------")
# Multidimensional Concatenation
grid = np.array([[1, 2, 3], [5, 6, 7]])
grid2 = np.array([[8, 9, 10], [11, 23, 25]])
concatinatedGrid = np.concatenate([grid, grid])
print(concatinatedGrid)
print("-------------------------------------")
# Hstack and Vstack
grid = np.array([[1, 2, 3], [5, 6, 7]])
concatinatedGrid = np.concatenate([grid, grid2], axis=0)
print(concatinatedGrid)
print("-----------------------------------")
grid = np.array([[1, 2, 3], [5, 6, 7]])
concatinatedGrid = np.concatenate([grid, grid2], axis=1)
print(concatinatedGrid)
print("-------------------------------------")
# shortcut for Hstack// comment for Hstack no of rows same and vice versa always
hconcatinated = np.hstack([grid, grid2])
print(hconcatinated)
print('--------------------------------------')
# vstack and column
x1 = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])
x2 = np.array([8, 9, 10, 11])
conc = np.vstack([x1, x2])
print(conc)
print('---------------------------------------')
c = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
x, y = np.split(c, indices_or_sections=[2])
print(x)
print(y)
print('--------------')
x1, x2, x3, x4 = np.split(c, indices_or_sections=[2, 4, 5])
print(x1)
print(x2)
print(x3)
print(x4)

print('---------------------')
grid = np.arange(16).reshape(4, 4)
upper, mid, lower = np.vsplit(grid, indices_or_sections=[1, 3])
left, center, right = np.hsplit(grid, indices_or_sections=[2, 3])
print(upper)
print(mid)
print(lower)
print(left)
print(center)
print(right)

print('---------------------------')
# UFUNCTIONS
y = np.array([1, 2, 3, 4, 5, 6])
print(y - 4)
print('--------------')
rng = np.random.default_rng(seed=111)

x1 = rng.integers(0, 10, (3, 4))
print(x1)
print(x1 + 5)
print(x1 - 5)
print(x1 * 5)
print(x1 / 5)
print(x1 ** 2)

print('----------------------------------')
print(np.add(x1, 2))
print(np.subtract(x1, 2))
print(np.negative(x1))
print(np.multiply(x1, 2))
print(np.divide(x1, 2))
print(np.floor_divide(x1, 2))
print(np.power(x1, 2))
print(np.mod(x1, 2))

print(f'--------------------')
x=np.arange(1,6)
print(x)
print(np.add.reduce(x))
print(np.multiply.reduce(x))
print(np.add.accumulate(x))
print(np.multiply.accumulate(x))
print('------------------------------')
print(f'Multiply for al pair of inputs')
x1=np.array([10,11,12,13,14,15,19,20,6])
print(np.multiply(x1,x1))
print(np.max(x1))
print(np.min(x1))
print(np.mean(x1))
print(np.std(x1))
print(np.percentile(x1,25))


